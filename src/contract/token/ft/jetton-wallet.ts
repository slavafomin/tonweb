
import BN from 'bn.js';

import { Cell } from '../../../boc/cell';
import { HttpProvider } from '../../../providers/http-provider';
import { Address } from '../../../utils/Address';
import { Contract, ContractMethods, ContractOptions } from '../../contract';
import { parseAddress } from '../nft/utils';


export interface JettonWalletOptions extends ContractOptions {
    wc?: 0;
}

export interface JettonWalletMethods extends ContractMethods {
}

export interface WalletData {
    balance: BN;
    ownerAddress: Address;
    jettonMinterAddress: Address;
    tokenWalletCode: Cell;
}


const codeHex = (

);


/**
 * ATTENTION: this is a DRAFT, there will be changes.
 */
export class JettonWallet extends Contract<
    JettonWalletOptions,
    JettonWalletMethods
> {

    public static codeHex = codeHex;


    constructor(
        provider: HttpProvider,
        options: JettonWalletOptions
    ) {

        options.wc = 0;

        options.code = (
            options.code ||
            Cell.oneFromBoc(codeHex)
        );

        super(provider, options);

    }


    public async getData(): Promise<WalletData> {
        const myAddress = await this.getAddress();
        const result = await this.provider.call2(
            myAddress.toString(),
            'get_wallet_data'
        );

        return {
            balance: result[0],
            ownerAddress: parseAddress(result[1]),
            jettonMinterAddress: parseAddress(result[2]),
            tokenWalletCode: result[3],
        };

    }

}
